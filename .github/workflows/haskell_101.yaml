# https://www.freecodecamp.org/news/a-lightweight-tool-agnostic-ci-cd-flow-with-github-actions/
name: main

on:
  push:
    branches:
      - main
      - master
      - develop
      - feature/**
      - bugfix/**
      - hotfix/**
    paths-ignore:
      - '**/README.md' # https://stackoverflow.com/questions/62968897/is-it-possible-to-not-run-github-action-for-readme-updates/62972393#62972393

#  pull_request:
#    branches: [ master, develop, feature/**, bugfix/** ]

# https://docs.github.com/en/actions/learn-github-actions/environment-variables
env:
  # https://github.com/actions/starter-workflows/issues/68#issuecomment-524665878
  DOCKER_IMAGE_TAG: "docker.pkg.github.com/${GITHUB_REPOSITORY}/${GITHUB_REF##*/}:${GITHUB_SHA}"

  DOCKER_CONTEXT_PATH: "haskell_101/codelab"
  IMAGE_NAME_SUFFIX: haskell_101

  LOCAL_IMAGE_BIN_NAME: training-docker-image
  LOCAL_IMAGE_BIN_PATH: ./dist

# https://faun.pub/building-a-ci-cd-pipeline-with-github-actions-and-docker-part-1-a9d8709c31fb
jobs:

  setup:
    name: Resolve variables and values
    runs-on: ubuntu-latest
    container:
      image: docker/compose:1.29.2

    steps:
      - name: Set default envs from the env above
        run: |
           echo "IMAGE_NAME_SUFFIX=${{env.IMAGE_NAME_SUFFIX}}" >> $GITHUB_ENV
           echo "DOCKER_CONTEXT_PATH=${{env.DOCKER_CONTEXT_PATH}}" >> $GITHUB_ENV

      - name: Parse and set the github repo name for the docker image
        run: |
           echo "GITHUB_IMAGE_REPO_NAME=$(echo ${GITHUB_REPOSITORY} | awk -F'/' '{ print $2 }' )-${{env.IMAGE_NAME_SUFFIX}}" >> $GITHUB_ENV

      - name: Parse and set the docker repo name
        run: |
           echo "PUBLIC_DOCKER_REPO=$(echo ${GITHUB_REPOSITORY} | sed 's/-docker//g' | sed 's/docker-//g' )" >> $GITHUB_ENV

  build:
    name: Build Docker Image with Haskell Training-101
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: docker/compose:1.29.2

    steps:
      - name: Fetch only the top commit
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Login to Gitlab Container Registry to pull Haskell image
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          # Resolves to this current user
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_GITLAB_TOKEN }}

      - name: Show cloned files scructure
        run: docker container run --rm -v $(pwd):$(pwd) iankoulski/tree $(pwd)

      - name: Build docker image
        # https://stackoverflow.com/questions/55756372/when-using-buildkit-with-docker-how-do-i-see-the-output-of-run-commands/55759337#55759337
        run: |
          echo "Building the context dir ${{env.DOCKER_CONTEXT_PATH}}"
          cd ${{env.DOCKER_CONTEXT_PATH}}

          COMPOSE_IMAGE_NAME=$(docker-compose config | docker run --rm -i mikefarah/yq e . - -o json | docker run --rm -i imega/jq -r '.services | first(.[]).image')
          echo "COMPOSE_IMAGE_NAME=${COMPOSE_IMAGE_NAME}" >> $GITHUB_ENV
          echo "Building image from docker-compose: ${COMPOSE_IMAGE_NAME}"
          DOCKER_BUILDKIT=1 docker-compose build

      - name: Saving the built docker image as a local file
        run: |
          echo "Saving the image locally at dir ${{env.LOCAL_IMAGE_BIN_PATH}}"
          mkdir ${{env.LOCAL_IMAGE_BIN_PATH}}
          docker save -o ${{env.LOCAL_IMAGE_BIN_PATH}}/${{env.LOCAL_IMAGE_BIN_NAME}} ${COMPOSE_IMAGE_NAME}

          ls -la ${{env.LOCAL_IMAGE_BIN_PATH}}/${{env.LOCAL_IMAGE_BIN_NAME}}
          ls -lah ${{env.LOCAL_IMAGE_BIN_PATH}}/${{env.LOCAL_IMAGE_BIN_NAME}}

      - name: Upload Docker Image to pipelie artifacts
        uses: actions/upload-artifact@v2
        with:
          name: training-image
          path: ${{env.LOCAL_IMAGE_BIN_PATH}}/${{env.LOCAL_IMAGE_BIN_NAME}}

  test:
    needs: build
    name: Executing the Solutions
    runs-on: ubuntu-latest
    container:
      image: docker/compose:1.29.2

    steps:
      - name: Download artifact cloner.dockerimage
        uses: actions/download-artifact@v2
        with:
          name: training-image

      - name: Load Docker Image Binary for cache
        run: |
          ls -la ${{env.LOCAL_IMAGE_BIN_NAME}}
          docker load -i ${{env.LOCAL_IMAGE_BIN_NAME}}

      - name: List the docker images locally
        run: |
          docker images

      - name: Fetch only the top commit
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Show cloned files scructure
        run: docker container run --rm -v $(pwd):$(pwd) iankoulski/tree $(pwd)

      - name: Run all tests in parallel
        # https://stackoverflow.com/questions/55756372/when-using-buildkit-with-docker-how-do-i-see-the-output-of-run-commands/55759337#55759337
        run: |
          echo "Since the image is already built and loaded, we can just run... docker-compose: ${COMPOSE_IMAGE_NAME}"
          docker-compose up

  deploy:
    name: Tag and Push the docker images
    needs: test
    runs-on: ubuntu-latest
    container:
      image: docker/compose:1.29.2

    steps:
      # https://github.com/marcellodesales/cloner/packages?package_type=Docker
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_GITHUB_TOKEN }}

      - name: Tagging the docker-compose image '${COMPOSE_IMAGE_NAME}' as '${DOCKER_IMAGE_TAG}'
        run: docker tag ${COMPOSE_IMAGE_NAME} ${DEFAULT_REPO_IMAGE_TAG}

      - name: Tag with the branch name
        run: docker tag docker.pkg.github.com/${GITHUB_REPOSITORY}/${{env.GITHUB_IMAGE_REPO_NAME}}:${GITHUB_SHA} docker.pkg.github.com/${GITHUB_REPOSITORY}/${{env.GITHUB_IMAGE_REPO_NAME}}:${GITHUB_REF##*/}

      - name: Tag the latest image
        if: endsWith(github.ref, '/main')
        run: docker tag docker.pkg.github.com/${GITHUB_REPOSITORY}/${{env.GITHUB_IMAGE_REPO_NAME}}:${GITHUB_SHA} docker.pkg.github.com/${GITHUB_REPOSITORY}/${{env.GITHUB_IMAGE_REPO_NAME}}:latest

      # Publish the Branch Docker Images to Github Container Registry
      - name: Push latest Docker Image
        run: docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${{env.GITHUB_IMAGE_REPO_NAME}}:${GITHUB_SHA}

      # Publish the Sha  Docker Images to Github Container Registry
      - name: Push Docker Image
        run: docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${{env.GITHUB_IMAGE_REPO_NAME}}:${GITHUB_REF##*/}

       # Publish the Sha  Docker Images to Github Container Registry
      - name: Push Docker Image latest from master
        if: endsWith(github.ref, '/main') || endsWith(github.ref, '/master')
        run: docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${{env.GITHUB_IMAGE_REPO_NAME}}:latest
