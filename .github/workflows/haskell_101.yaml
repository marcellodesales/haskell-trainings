# https://www.freecodecamp.org/news/a-lightweight-tool-agnostic-ci-cd-flow-with-github-actions/
name: main

on:
  push:
    branches:
      - main
      - master
      - develop
      - feature/**
      - bugfix/**
      - hotfix/**
    paths-ignore:
      - '**/README.md' # https://stackoverflow.com/questions/62968897/is-it-possible-to-not-run-github-action-for-readme-updates/62972393#62972393

#  pull_request:
#    branches: [ master, develop, feature/**, bugfix/** ]

# https://docs.github.com/en/actions/learn-github-actions/environment-variables
env:
  DOCKER_CONTEXT_PATH: "haskell_101/codelab"
  IMAGE_NAME_SUFFIX: haskell_101

  LOCAL_IMAGE_BIN_NAME: training-docker-image
  LOCAL_IMAGE_BIN_PATH: ./dist

# https://faun.pub/building-a-ci-cd-pipeline-with-github-actions-and-docker-part-1-a9d8709c31fb
jobs:

  setup:
    name: Resolve variables and values
    runs-on: ubuntu-latest
    container:
      image: docker/compose:1.29.2

    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    outputs:
      imageNameSuffix: ${{steps.set-base-values.outputs.imageNameSuffix}}
      dockerContextPath: ${{steps.set-base-values.outputs.dockerContextPath}}
      defaultDockerImageRepo: ${{steps.set-base-values.outputs.defaultDockerImageRepo}}
      defaultDockerImageVersion: ${{steps.set-base-values.outputs.defaultDockerImageVersion}}
      defaultDockerImageBranchTag: ${{steps.set-base-values.outputs.defaultDockerImageBranchTag}}

    steps:
      - name: Set default envs from the env above
        run: |
           echo "IMAGE_NAME_SUFFIX=${{env.IMAGE_NAME_SUFFIX}}" >> $GITHUB_ENV
           echo "DOCKER_CONTEXT_PATH=${{env.DOCKER_CONTEXT_PATH}}" >> $GITHUB_ENV
           # registry has renamed: https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-docker-registry
           echo "DEFAULT_DOCKER_IMAGE_REPO=ghcr.io/${GITHUB_REPOSITORY}" >> $GITHUB_ENV
           echo "DEFAULT_DOCKER_IMAGE_VERSION=${IMAGE_NAME_SUFFIX}-${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Parse and set the github repo name for the docker image
        run: |
           echo "GITHUB_IMAGE_REPO_NAME=$(echo ${GITHUB_REPOSITORY} | awk -F'/' '{ print $2 }' )-${{env.IMAGE_NAME_SUFFIX}}" >> $GITHUB_ENV

      - name: Parse and set the docker repo name
        run: |
           echo "PUBLIC_DOCKER_REPO=$(echo ${GITHUB_REPOSITORY} | sed 's/-docker//g' | sed 's/docker-//g' )" >> $GITHUB_ENV

      - id: set-base-values
        # The below outputs a JSON array of check tasks for each subproject
        #  and uses GitHub Actions magic (::set-output) to set an output
        #  variable https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
        # https://github.community/t/sharing-a-variable-between-jobs/16967/14
        run: |
          BRANCH_TAG=${IMAGE_NAME_SUFFIX}-$(echo ${GITHUB_SHA} |  cut -c1-7)-${GITHUB_REF##*/}
          echo "Branch tag to use: ${BRANCH_TAG}"

          echo "Setting the value of the image suffix: ${{env.IMAGE_NAME_SUFFIX}}"
          echo "::set-output name=imageNameSuffix::$IMAGE_NAME_SUFFIX"
          echo "::set-output name=dockerContextPath::$DOCKER_CONTEXT_PATH"
          echo "::set-output name=defaultDockerImageRepo::$DEFAULT_DOCKER_IMAGE_REPO"
          echo "::set-output name=defaultDockerImageVersion::$DEFAULT_DOCKER_IMAGE_VERSION"
          echo "::set-output name=defaultDockerImageBranchTag::$BRANCH_TAG"

  build:
    name: Build Docker Image with Haskell Training-101
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: docker/compose:1.29.2

   # Declare our output variable https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      image_name: ${{ steps.set-compose_image_name.outputs.image_name }}

    steps:
      - name: Fetch only the top commit
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Login to Gitlab Container Registry to pull Haskell image
        uses: docker/login-action@v1
        with:
          registry: registry.gitlab.com
          # Resolves to this current user
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_GITLAB_TOKEN }}

      - name: Show cloned files scructure
        run: |
          docker container run --rm -v $(pwd):$(pwd) iankoulski/tree $(pwd)
          ls -lar

      - id: set-matrix
        # The below outputs a JSON array of check tasks for each subproject
        #  and uses GitHub Actions magic (::set-output) to set an output
        #  variable https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
        run: |
          #ls -lar
          # https://stackoverflow.com/questions/22434290/jq-bash-make-json-array-from-variable/54576004#54576004
          cd ${{env.DOCKER_CONTEXT_PATH}}

          # Get the keys in docker-compose https://stackoverflow.com/questions/23118341/how-to-get-key-names-from-json-using-jq/23118607#23118607
          EXERCISES=$(docker-compose config | docker run --rm -i mikefarah/yq e . - -o json | docker run --rm -i imega/jq -r -c '.services | keys')

          # Convert them into the matrix object
          GITHUB_MATRIX_PACKAGES=$(echo $EXERCISES | docker run --rm -i imega/jq '. | sort' | docker run --rm -i imega/jq -c '{"package": .}')
          echo "Dynamic github matrix packages: ${GITHUB_MATRIX_PACKAGES}"

          # Build a matrix of values to generate parallel stages, one for each exercise
          # https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
          # https://rnorth.org/faster-parallel-github-builds/
          # https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
          # https://github.com/r-dbi/DBItest/blob/main/.github/workflows/backends.yaml
          echo "Setting the value as the matrix..."
          echo "::set-output name=matrix::$GITHUB_MATRIX_PACKAGES"

      - name: Build docker image
        # https://stackoverflow.com/questions/55756372/when-using-buildkit-with-docker-how-do-i-see-the-output-of-run-commands/55759337#55759337
        run: |
          echo "Building the context dir ${{env.DOCKER_CONTEXT_PATH}}"
          cd ${{env.DOCKER_CONTEXT_PATH}}

          COMPOSE_IMAGE_NAME=$(docker-compose config | docker run --rm -i mikefarah/yq e . - -o json | docker run --rm -i imega/jq -r '.services | first(.[]).image')
          echo "COMPOSE_IMAGE_NAME=${COMPOSE_IMAGE_NAME}" >> $GITHUB_ENV
          echo "Building image from docker-compose: ${COMPOSE_IMAGE_NAME}"
          DOCKER_BUILDKIT=1 docker-compose build

      - id: set-compose_image_name
        # The below outputs a JSON array of check tasks for each subproject
        #  and uses GitHub Actions magic (::set-output) to set an output
        #  variable https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
        run: |
          # Build a matrix of values to generate parallel stages, one for each exercise
          # https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
          # https://rnorth.org/faster-parallel-github-builds/
          # https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
          # https://github.com/r-dbi/DBItest/blob/main/.github/workflows/backends.yaml
          echo "Setting the value of the container image name: ${COMPOSE_IMAGE_NAME}"

          # MAKE SURE TO NOT USE ${} in variables for set-output
          echo "::set-output name=image_name::$COMPOSE_IMAGE_NAME"

      - name: Saving the built docker image as a local file
        run: |
          echo "Saving the image locally at dir ${{env.LOCAL_IMAGE_BIN_PATH}}"
          mkdir ${{env.LOCAL_IMAGE_BIN_PATH}}
          docker save -o ${{env.LOCAL_IMAGE_BIN_PATH}}/${{env.LOCAL_IMAGE_BIN_NAME}} ${COMPOSE_IMAGE_NAME}

          ls -la ${{env.LOCAL_IMAGE_BIN_PATH}}/${{env.LOCAL_IMAGE_BIN_NAME}}
          ls -lah ${{env.LOCAL_IMAGE_BIN_PATH}}/${{env.LOCAL_IMAGE_BIN_NAME}}

      - name: Upload Docker Image to pipelie artifacts
        uses: actions/upload-artifact@v2
        with:
          name: training-image
          path: ${{env.LOCAL_IMAGE_BIN_PATH}}/${{env.LOCAL_IMAGE_BIN_NAME}}

  test:
    needs: build
    name: Executing the Solutions
    runs-on: ubuntu-latest
    container:
      image: docker/compose:1.29.2

    # Composite github : https://stackoverflow.com/questions/65242830/in-a-github-actions-workflow-is-there-a-way-to-have-multiple-jobs-reuse-the-sam/65243912#65243912
    # Just use a matrix to run the tests for each individual exercise
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.build.outputs.matrix)}}

    steps:
      - name: Download built training-image
        uses: actions/download-artifact@v2
        with:
          name: training-image

      - name: Load Docker Image Binary for cache
        run: |
          ls -la ${{env.LOCAL_IMAGE_BIN_NAME}}
          docker load -i ${{env.LOCAL_IMAGE_BIN_NAME}}

      - name: List the docker images locally
        run: |
          docker images

      - name: Fetch only the top commit
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Show cloned files structure
        run: |
          docker container run --rm -v $(pwd):$(pwd) iankoulski/tree $(pwd)
          ls -lar

      - name: Run ${{matrix.package}} tests
        # https://stackoverflow.com/questions/55756372/when-using-buildkit-with-docker-how-do-i-see-the-output-of-run-commands/55759337#55759337
        run: |
          echo "Building the context dir ${{env.DOCKER_CONTEXT_PATH}}"
          cd ${{env.DOCKER_CONTEXT_PATH}}

          echo "Since the image is already built and loaded: docker-compose: ${COMPOSE_IMAGE_NAME} ${{matrix.package}}"
          docker-compose run ${{matrix.package}}

  deploy:
    name: Tag and Push the docker images
    # https://stackoverflow.com/questions/63148639/create-dependencies-between-jobs-in-github-actions/63148947#63148947
    # https://github.community/t/sharing-a-variable-between-jobs/16967/14
    needs: [setup, build]
    runs-on: ubuntu-latest
    container:
      image: docker/compose:1.29.2

    steps:
      # https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
      - name: Show all outputs
        run: |
          echo "Output key: needs.setup.outputs.defaultDockerImageRepo=${{needs.setup.outputs.defaultDockerImageRepo}}"
          echo "Output key: needs.setup.outputs.defaultDockerImageVersion=${{needs.setup.outputs.defaultDockerImageVersion}}"
          echo "Output key: needs.setup.outputs.defaultDockerImageBranchTag=${{needs.setup.outputs.defaultDockerImageBranchTag}}"

      - name: Download built training-image
        uses: actions/download-artifact@v2
        with:
          name: training-image

      - name: Load Docker Image Binary for cache
        run: |
          ls -la ${{env.LOCAL_IMAGE_BIN_NAME}}
          docker load -i ${{env.LOCAL_IMAGE_BIN_NAME}}

      - name: List the docker images locally
        run: |
          docker images

      # https://github.com/marcellodesales/cloner/packages?package_type=Docker
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_GITHUB_TOKEN }}

      # https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
      - name: Tag & Push SHA docker-compose image '${{needs.build.outputs.image_name}}' as '${{needs.setup.outputs.defaultDockerImageRepo}}:${{needs.setup.outputs.defaultDockerImageVersion}}'
        run: |
          docker tag ${{needs.build.outputs.image_name}} ${{needs.setup.outputs.defaultDockerImageRepo}}:${{needs.setup.outputs.defaultDockerImageVersion}}
          docker push ${{needs.setup.outputs.defaultDockerImageRepo}}:${{needs.setup.outputs.defaultDockerImageVersion}}

      - name: Tag & Push BRANCH docker-compose image '${{needs.build.outputs.image_name}}' as '${{needs.setup.outputs.defaultDockerImageRepo}}:${{needs.setup.outputs.defaultDockerImageBranchTag}}'
        run: |
          docker tag ${{needs.build.outputs.image_name}} ${{needs.setup.outputs.defaultDockerImageRepo}}:${{needs.setup.outputs.defaultDockerImageBranchTag}}
          docker push ${{needs.setup.outputs.defaultDockerImageRepo}}:${{needs.setup.outputs.defaultDockerImageBranchTag}}

      - if: endsWith(github.ref, '/main') || endsWith(github.ref, '/master')
        name: Tag & Push LATEST docker-compose image '${{needs.build.outputs.image_name}}' as '${{needs.setup.outputs.defaultDockerImageRepo}}:latest'
        run: |
          docker tag ${{needs.build.outputs.image_name}} ${{steps.setup.outputs.defaultDockerImageRepo}}:latest
          docker push ${{steps.setup.outputs.defaultDockerImageRepo}}:latest
